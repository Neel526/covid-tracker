{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","isBlue","isGreen","isGrey","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormate","yAxes","gridLines","ticks","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wYAsBeA,MAlBf,YAA2F,IAAzEC,EAAwE,EAAxEA,MAAOC,EAAiE,EAAjEA,MAAOC,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,OAAQC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,MAAUC,EAAQ,sFACtF,OACI,kBAACC,EAAA,EAAD,CACAC,QAASF,EAAME,QACfC,UAAS,kBAAcL,GAAU,oBAAxB,YAA+CJ,GAAS,eAAxD,YAA0EC,GAAU,gBAApF,YAAuGE,GAAU,kBACvH,kBAACO,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAYC,MAAM,iBACjBd,GAED,wBAAIW,UAAS,wBAAmBR,GAAU,sBAA7B,YAAsDC,GAAW,uBAAjE,cAA6FC,GAAU,wBAApH,IAA+IJ,EAA/I,KACA,kBAACY,EAAA,EAAD,CAAYF,UAAU,gBAAgBG,MAAM,iBACvCP,EADL,a,sECTNQ,EAAkB,CACpBd,MAAO,CACHe,IAAK,UACLC,WAAY,KAEhBX,OAAQ,CACJU,IAAK,UACLC,WAAY,KAEhBC,UAAW,CACPF,IAAK,UACLC,WAAY,MAEhBE,OAAQ,CACJH,IAAK,UACLC,WAAY,OAKPG,EAAW,SAACC,GAGrB,OAFgB,YAAQA,GAENC,MAAK,SAACC,EAAEC,GAAH,OAAUD,EAAEtB,MAAQuB,EAAEvB,OAAS,EAAI,MAGjDwB,EAAkB,SAACC,GAAD,OAC3BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MCZjCC,MAff,YAAoD,IAAtCC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,KACxC,OACI,yBAAKtB,UAAU,OACX,kBAAC,IAAD,CAAYqB,OAAQA,EAAQC,KAAMA,GAC9B,kBAACC,EAAA,EAAD,CACAC,IAAI,qDACJC,YAAY,sEDyBC,SAACf,GAAD,IAAOU,EAAP,uDAAmB,QAAnB,OACzBV,EAAKgB,KAAI,SAACC,GAAD,OACL,kBAACC,EAAA,EAAD,CACAP,OAAS,CAACM,EAAQE,YAAYC,IAAKH,EAAQE,YAAYE,MACvDC,YAAa,GACb7B,MAAOC,EAAgBgB,GAAWf,IAClC4B,UAAW7B,EAAgBgB,GAAWf,IACtC6B,OACIC,KAAKC,KAAKT,EAAQP,IAAYhB,EAAgBgB,GAAWd,YAG7D,kBAAC+B,EAAA,EAAD,KACI,yBAAKrC,UAAU,kBACb,yBACAA,UAAU,YACVsC,MAAQ,CAACC,gBAAgB,OAAD,OAASZ,EAAQE,YAAYW,KAA7B,QAExB,yBAAKxC,UAAU,YAAY2B,EAAQA,SACnC,yBAAK3B,UAAU,kBAAf,UAAwCgB,IAAQW,EAAQrC,OAAO2B,OAAO,OAAtE,KACA,yBAAKjB,UAAU,eAAf,WAAsCgB,IAAQW,EAAQhC,QAAQsB,OAAO,OAArE,KACA,yBAAKjB,UAAU,kBAAf,cAA4CgB,IAAQW,EAAQpB,WAAWU,OAAO,OAA9E,KACA,yBAAKjB,UAAU,eAAf,WAAsCgB,IAAQW,EAAQnB,QAAQS,OAAO,OAArE,WC5CGwB,CAAetB,EAAWC,M,OCK5BsB,MAff,YAA+B,IAAdvB,EAAa,EAAbA,UACb,OACI,yBAAKnB,UAAU,SACZmB,EAAUO,KAAI,gBAAGC,EAAH,EAAGA,QAASrC,EAAZ,EAAYA,MAAZ,OACX,4BACA,4BAAKqC,GACL,4BACA,gCAASX,IAAQ1B,GAAO2B,OAAO,e,QCLvC0B,EAAU,CACZC,OAAQ,CACJC,SAAS,GAEbC,SAAU,CACNC,MAAO,CACHb,OAAQ,IAGhBc,qBAAqB,EACrBC,SAAU,CACNC,KAAM,QACNC,WAAW,EACXC,UAAW,CACPC,MAAO,SAAUC,EAAa5C,GAC1B,OAAOM,IAAQsC,EAAYC,OAAOtC,OAAO,WAIrDuC,OAAQ,CACJC,MAAO,CACH,CACIC,KAAM,OACNC,KAAM,CACF1C,OAAQ,aACR2C,eAAgB,QAI5BC,MAAO,CACH,CACIC,UAAW,CACPjB,SAAS,GAEbkB,MAAO,CACHX,UAAW,SAAUG,EAAOS,EAAOC,GAC/B,OAAOjD,IAAQuC,GAAOtC,OAAO,YAiEtCiD,MAxDf,YAAsD,EAAjC9C,UAAkC,IAAVvB,EAAS,+BAC1BsE,mBAAS,IADiB,mBAC3CzD,EAD2C,KACrC0D,EADqC,KAI5CC,EAAiB,SAAC3D,GAA+B,IAE/C4D,EAFsBlD,EAAwB,uDAAZ,QAClCmD,EAAY,GAEhB,IAAK,IAAIC,KAAQ9D,EAAKpB,MAAO,CACzB,GAAIgF,EAAe,CACf,IAAIG,EAAe,CACfC,EAAGF,EACHG,EAAGjE,EAAKU,GAAWoD,GAAQF,GAE/BC,EAAUK,KAAKH,GAEnBH,EAAgB5D,EAAKU,GAAWoD,GAEpC,OAAOD,GAkBX,OAfAM,qBAAU,YACS,uCAAG,sBAAAjE,EAAA,sEACRkE,MAAM,8DACXC,MAAK,SAAAC,GACH,OAAOA,EAASC,UAElBF,MAAK,SAAArE,GACF,IAAI6D,EAAYF,EAAe3D,EAAM,SACrC0D,EAAQG,MAPE,2CAAH,qDAWfW,KACD,IAGF,yBAAKlF,UAAWH,EAAMG,YACV,OAAJU,QAAI,IAAJA,OAAA,EAAAA,EAAMyE,QAAS,GACR,kBAAC,IAAD,CACIxC,QAASA,EACTjC,KAAM,CACF0E,SAAU,CACN,CACIC,gBAAiB,yBACjBC,YAAa,UACb5E,KAAMA,S,OC8C3B6E,MAlIf,WAAgB,IAAD,EACqBpB,mBAAS,IAD9B,mBACNhD,EADM,KACKqE,EADL,OAEiBrB,mBAAS,aAF1B,mBAENxC,EAFM,KAEG8D,EAFH,OAGyBtB,mBAAS,IAHlC,mBAGNtC,EAHM,KAGO6D,EAHP,OAIqBvB,mBAAS,IAJ9B,mBAINwB,EAJM,KAIKC,EAJL,OAMbzB,mBAAS,CAAErC,IAAK,QAAS+D,IAAK,UANjB,mBAKNC,EALM,KAKKC,EALL,OAOiB5B,mBAAS,GAP1B,mBAON6B,EAPM,KAOGC,EAPH,OAQ2B9B,mBAAS,IARpC,mBAQN+B,EARM,KAQQC,EARR,OASqBhC,mBAAS,SAT9B,mBASN/C,EATM,KASKgF,EATL,KAWbvB,qBAAU,WACRC,MAAM,sCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAArE,GACJgF,EAAehF,QAEhB,IAEHmE,qBAAU,YACY,uCAAG,sBAAAjE,EAAA,sEACjBkE,MAAM,4CACXC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACrE,GACL,IAAMS,EAAYT,EAAKgB,KAAI,SAACC,GAAD,MAAc,CACrC0E,KAAM1E,EAAQA,QACd4B,MAAO5B,EAAQE,YAAYyE,SAGvBC,EAAa9F,EAASC,GAC5BkF,EAAaW,GACbJ,EAAgBzF,GAChB8E,EAAarE,MAZM,2CAAH,qDAetBqF,KACC,IAED,IAAMC,EAAe,uCAAG,WAAOC,GAAP,iBAAA9F,EAAA,6DAChB+F,EAAaD,EAAME,OAAOrD,MAChCkC,EAAWkB,GAELnF,EAAsB,cAAhBmF,EACV,qCADU,mDAEkCA,GANxB,SAQhB7B,MAAMtD,GACXuD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAArE,GACJ+E,EAAWkB,GACXjB,EAAehF,GACfqF,EAAa,CAACrF,EAAKmB,YAAYC,IAAKpB,EAAKmB,YAAYE,OACrDkE,EAAW,MAdS,2CAAH,sDAoBrB,OAFAY,QAAQC,IAAI,kBAAmBjF,GAG7B,yBAAK7B,UAAU,OACb,yBAAKA,UAAU,YACjB,yBAAKA,UAAU,cACf,iDACE,kBAAC+G,EAAA,EAAD,CAAa/G,UAAU,gBACvB,kBAACgH,EAAA,EAAD,CAAQC,QAAQ,WAAWC,SAAUT,EAAiBlD,MAAO5B,GAC3D,kBAACwF,EAAA,EAAD,CAAU5D,MAAM,aAAhB,aACCpC,EAAUO,KAAI,SAACC,GAAD,OACb,kBAACwF,EAAA,EAAD,CAAU5D,MAAO5B,EAAQ4B,OAAQ5B,EAAQ0E,YAWnD,yBAAKrG,UAAU,aACX,kBAAC,EAAD,CACAT,OAAK,EACLI,OAAsB,UAAdyB,EACRrB,QAAU,SAAAqH,GAAC,OAAIhB,EAAa,UAC5B/G,MAAM,oBACNC,MAAOwB,EAAgBe,EAAYwF,YACnCzH,MAAOkB,EAAgBe,EAAYvC,SAEnC,kBAAC,EAAD,CACAE,QAAM,EACNG,OAAsB,WAAdyB,EACRrB,QAAU,SAAAqH,GAAC,OAAIhB,EAAa,WAC5B/G,MAAM,SACNC,MAAOwB,EAAgBe,EAAYlC,UAEnC,kBAAC,EAAD,CACAF,SAAO,EACPE,OAAsB,cAAdyB,EACRrB,QAAU,SAAAqH,GAAC,OAAIhB,EAAa,cAC5B/G,MAAM,YACNC,MAAOwB,EAAgBe,EAAYyF,gBACnC1H,MAAOkB,EAAgBe,EAAYtB,aAEnC,kBAAC,EAAD,CACAb,QAAM,EACNC,OAAsB,WAAdyB,EACRrB,QAAU,SAAAqH,GAAC,OAAIhB,EAAa,WAC5B/G,MAAM,SACNC,MAAOwB,EAAgBe,EAAY0F,aACnC3H,MAAOkB,EAAgBe,EAAYrB,WAIrC,kBAAC,EAAD,CAAKY,UAAWA,EAAWD,UAAW+E,EAAc7E,OAAQyE,EAAWxE,KAAM0E,KAG7E,kBAAClG,EAAA,EAAD,CAAME,UAAU,aACd,kBAACC,EAAA,EAAD,KAEE,qDACA,kBAAC,EAAD,CAAOkB,UAAWwE,IAElB,wBAAI3F,UAAW,kBAAf,iBAA+CoB,GAC/C,kBAAC,EAAD,CAAWpB,UAAW,YAAYoB,UAAWA,QCzH/BoG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.49b54c81.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./InfoBox.css\"\r\nimport { Card, CardContent, Typography} from \"@material-ui/core\";\r\n\r\nfunction InfoBox({title, cases, isRed, isBlue, isGreen, isGrey, active, total, ...props}) {\r\n    return (\r\n        <Card \r\n        onClick={props.onClick}\r\n        className= {`infobox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'} ${isBlue && 'infoBox--blue'} ${isGrey && 'infoBox--grey'}`}>\r\n           <CardContent>\r\n            <Typography color=\"textSecondary\">\r\n            {title} \r\n            </Typography>\r\n            <h2 className={`infoBox_cases ${isBlue && \"infoBox_cases--blue\"} ${isGreen && \"infoBox_cases--green\"}   ${isGrey && \"infoBox_cases--grey\"}`}> {cases} </h2>\r\n            <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                {total} Total\r\n            </Typography>\r\n           </CardContent> \r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport {Circle,Popup} from \"react-leaflet\"\r\n\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    active: {\r\n        hex: \"#0000FF\",\r\n        multiplier: 1000,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#808080\",\r\n        multiplier: 1400,\r\n    },\r\n    \r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [ ...data];\r\n\r\n    return sortedData.sort((a,b) =>( a.cases > b.cases ? -1 : 1 )) ; \r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n// Draw circles on the map with interactice tooltip\r\nexport const showDataOnMap = (data, casesType = \"cases\") => \r\n    data.map((country) => (\r\n        <Circle\r\n        center= {[country.countryInfo.lat, country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        radius={\r\n            Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier\r\n        }\r\n        >\r\n        <Popup>\r\n            <div className=\"info-container\">\r\n              <div \r\n              className=\"info-flag\" \r\n              style= {{backgroundImage: `url(${country.countryInfo.flag})` }}>\r\n              </div>  \r\n              <div className=\"inf-name\">{country.country}</div>\r\n              <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0.0\")} </div>\r\n              <div className=\"info-active\">Active: {numeral(country.active).format(\"0.0\")} </div>             \r\n              <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0.0\")} </div>\r\n              <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0.0\")} </div>\r\n              </div>\r\n\r\n\r\n        </Popup>\r\n        </Circle>\r\n    ))\r\n","import React from 'react'\r\nimport './Map.css'\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\"\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy;<a href=\"http:osm.org/copyright\">OpenStreet</a> contributors '\r\n                />\r\n                {showDataOnMap (countries, casesType)}\r\n                \r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport \"./table.css\"\r\nimport numeral from \"numeral\"\r\nfunction Table({ countries }) {\r\n    return (  \r\n        <div className=\"table\">\r\n          {countries.map(({ country, cases }) => (\r\n              <tr>\r\n              <td>{country}</td>\r\n              <td>\r\n              <strong>{numeral(cases).format(\"0.0\")}</strong>\r\n              </td>\r\n              </tr>\r\n          ))}\r\n        </div>\r\n   )\r\n}\r\n\r\nexport default Table\r\n","import React, {useState, useEffect } from 'react';\r\n\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YYYY\",\r\n                    tooltipFormate: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callbacks: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n    const [data, setData] = useState({});\r\n\r\n\r\n    const buildChartData = (data, casesType = \"cases\") => {\r\n        let chartData = [];\r\n        let lastDataPoint;\r\n        for (let date in data.cases) {\r\n            if (lastDataPoint) {\r\n                let newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint,\r\n                };\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then(response => {\r\n               return response.json();\r\n            })\r\n            .then(data => {\r\n                let chartData = buildChartData(data, \"cases\");\r\n                setData(chartData);\r\n            });\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return ( \r\n    \t<div className={props.className}>\r\n            {data?.length > 0 && (\r\n                    <Line \r\n                        options={options}\r\n                        data={{\r\n                            datasets: [\r\n                                {\r\n                                    backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                    borderColor: \"#CC1034\",\r\n                                    data: data\r\n                                }\r\n                            ]\r\n                        }}\r\n                    />\r\n                )}\r\n            \r\n        </div>\r\n    );\r\n} \r\n\r\nexport default LineGraph;\r\n","import React, {useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent} from \"@material-ui/core\";\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from \"./Table\"\nimport { sortData, prettyPrintStat } from \"./util\"\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\"\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = \n  useState({ lat: 20.5937, lng: 78.9629});\n  const [mapZoom, setMapZoom] = useState(4);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    })\n  }, [])\n\n  useEffect(() => {\n  const getCountriesData = async () => {\n    await fetch(\"https://disease.sh/v3/covid-19/countries\")\n    .then((response) => response.json())\n    .then((data) => {\n      const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2\n        }));\n        \n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n    });\n  }\n  getCountriesData();\n}, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode= event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' \n    ? \"https://disease.sh/v3/covid-19/all\" \n    : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n   \n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode)\n      setCountryInfo(data)\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n      setMapZoom(4);\n    })\n  };\n\n  console.log(\"country Info<<<\", countryInfo)\n\n  return (   \n    <div className=\"App\">\n      <div className=\"app_left\">\n    <div className=\"app_header\">\n    <h1> COVID-19 TRACKER</h1>\n      <FormControl className=\"app_dropdown\">\n      <Select variant=\"outlined\" onChange={onCountryChange} value={country}  >\n        <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n        {countries.map((country) => (\n          <MenuItem value={country.value}>{country.name}</MenuItem>\n        ))}\n        </Select>\n      </FormControl>\n\n    </div>\n \n  { /*infoBox*/ }\n  { /*infoBox*/ }\n  { /*infoBox*/ }\n\n<div className=\"app_stats\">\n    <InfoBox\n    isRed\n    active={casesType === \"cases\"} \n    onClick= {e => setCasesType('cases')}\n    title=\"coronavirus cases\" \n    cases={prettyPrintStat(countryInfo.todayCases)} \n    total={prettyPrintStat(countryInfo.cases)}/>\n    \n    <InfoBox \n    isBlue\n    active={casesType === \"active\"} \n    onClick= {e => setCasesType('active')}\n    title=\"Active\" \n    cases={prettyPrintStat(countryInfo.active)}  />\n    \n    <InfoBox \n    isGreen\n    active={casesType === \"recovered\"} \n    onClick= {e => setCasesType('recovered')}\n    title=\"Recovered\" \n    cases={prettyPrintStat(countryInfo.todayRecovered)} \n    total={prettyPrintStat(countryInfo.recovered)} />\n\n    <InfoBox \n    isGrey\n    active={casesType === \"deaths\"} \n    onClick= {e => setCasesType('deaths')}\n    title=\"Deaths\" \n    cases={prettyPrintStat(countryInfo.todayDeaths)} \n    total={prettyPrintStat(countryInfo.deaths)} />\n</div>\n\n  { /*Map*/ }\n  <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}  />\n    </div>\n    \n  <Card className=\"app_right\">\n    <CardContent>\n      { /*Table*/ }\n      <h1>Live cases by country</h1>\n      <Table countries={tableData} />\n      { /*Graph*/ }\n      <h3 className= \"app_graphTitle\">Worldwide New {casesType}</h3>\n      <LineGraph className= \"app_graph\" casesType={casesType} />\n    </CardContent>\n  </Card>\n</div>\n);\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}